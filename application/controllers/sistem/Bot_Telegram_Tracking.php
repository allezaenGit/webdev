<?php
require APPPATH. '/controllers/sistem/Bot_Telegram_Tracking_config.php';

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

use ybs\general\Load;
use ybs\general\Validation;
use ybs\general\Storage;

use ybs\http\Request;
use ybs\http\Response;



//untuk menggunakan model Eloquent laravel aktifkan code di bawah ini//
//use model\sistem\Bot_Telegram_TrackingModel;


class Bot_Telegram_Tracking extends CI_Controller {
	
	//private $tmodel;
    public function __construct(){
        parent::__construct();
		
		 //use this for load all model in folder
		 //Load::model("Sistemx");
		 $this->load->model('sys/Bot_Telegram_TrackingModel','tmodel');
		
		 
		 IDCoder::run($this);
    }


	public function index(){
		$breadcrumb = [
			'Bot Telegram'				=> site_url() . 'sistem/Bot_Telegram',
			'Tracking' 					=>   url(),
			'List Data' 				=>  '',
		];
		$menu = $this->load->view('sistem/bot_manager/Telegram_menu',['selected'=> 'tracking'],true);
		$data = [
			'breadcrumb'			=> $breadcrumb,
			'title_page_big'		=> 'Daftar Tracking Telegram Access',
			'title'					=> new Bot_Telegram_Tracking_config(),
			'link_refresh_table'	=> url("refresh_table/" . $this->_token ),
			
			'link_delete'			=> url("delete_multiple"),
			'link_empty'			=> url("emptyTable/" . $this->_token),
			'menu'					=> $menu,
		];
		
		response()->view('sistem/bot_manager/Bot_Telegram_Tracking_list',$data);

	}

	public function refresh_table($token){
		if($token==$this->_token){
			
			$row = $this->tmodel->json();
			
			//create key n put in session for encode id
			$key  = IDCoder::createKey();
			
			$x = 0;
			foreach($row['data'] as $val){
				
				$idgenerate = IDCoder::encode($val['id'],$key);
				
				//generate ID		
				$row['data'][$x]['id'] = $idgenerate;
				
						
				$x++;
			}
			
			response()->dataTables($row);
			

		}else{
			response()->goto('Auth');
		}
	}

	


	

	public function delete_multiple(){
		
		$val=request();
		
		$data = explode(',',$val['data_delete']);

		$key = IDCoder::getKey();
		
		$xx=0;
		foreach($data as $value){
			$id =  IDCoder::decode($value,$key);
			
			//delete file permanent, 
			//fungsi ini akan bekerja ketika ada file yang di upload	
			Storage::deleteByID($id,\Bot_Telegram_TrackingModel::table,[]);
			
			
			
			//menganti ke id asli
			$data[$xx] = $id;
			$xx++;	
		}
		
		$success = $this->tmodel->delete_multiple($data,false);
		
		$o = new Outputview();
		
		//create message
		if($success){
			$o->success 	= true;
			$o->message	= 'Data berhasil di hapus !';
		}else{
			$o->success 	= false;
			$o->message	= 'Opps..Gagal menghapus data !!';
		}
		
		
		response()->json($o->result());
	
	}
	
	public function emptyTable($token){
		if($token==$this->_token){
			
			$this->load->model("sys/YbsService_Model","tservice");
			$this->tservice->emptyTable('sys_bot_telegram_tracking_access');
			
			response()->json("ok");	
		}
	}



};

/* END */
/* Mohon untuk tidak mengubah informasi ini : */
/* Generated by YBS CRUD Generator 2021-04-18 09:27:47 */
/* contact : YAP BRIDGING SYSTEM 		*/
/*			 bridging.system@gmail.com  */
/* 			 MAKASSAR CITY, INDONESIAN 	*/

